import 'babel-polyfill'
import api from 'api'
import supertest from 'supertest'
import {expect, should} from 'chai'
import {cleanDb, authUser} from '../utils'

should()
const request = supertest.agent(api.listen())
const context = {}
describe('{{properCase name}}', () => {
    before((done) => {
        cleanDb()
        authUser(request, (err, credentials) => {
            if (err) {
                return done(err)
            }

            context.user = credentials.user
            context.token = credentials.token
            done()
        })
    })

    describe(`POST v1/{{ lowerCase name }}s`, () => {
        it('should reject creation when no authenticated', (done) => {
            request.post('/v1/{{ lowerCase name }}s').set('Accept', 'application/json').send({}).expect(401, done)
        })

        it('should create {{ lowerCase name }}', (done) => {
             const { token } = context
            request.post(`/v1/{{ lowerCase name }}s`)
                .set({ Accept: 'application/json', Authorization: `Bearer ${token}` })
                .send({{ curly true }}{{#each fields}}{{#if this.required}}
                    {{ camelCase this.name }}: 'test',{{/if}}{{/each}}
                {{ curly }})
                .expect(200, (err, res) => {
                    if (err) {
                        return done(err)
                    }
                    res.body.should.have.property('data'){{#each fields}}{{#if this.required}}
                    res.body.data.{{ camelCase this.name }}.should.equals('test'){{/if}}{{/each}}
                    context.{{ lowerCase name }} = res.body.data
                    done()
                })
        })
    })

    describe(`GET v1/{{ lowerCase name }}s`, () => {
        it('should get {{ lowerCase name }}s', (done) => {
            request.get(`/v1/{{ lowerCase name }}s`).set('Accept', 'application/json').expect(200, (err, res) => {
                if (err) {
                    return done(err)
                }

                res.body.should.have.property('data')
                res.body.should.have.property('total')
                res.body.total.should.equals(1)
                res.body.total.should.equals(res.body.data.length)
                done()
            })
        })
    })

    describe(`GET v1/{{ lowerCase name }}`, () => {

        it('should get {{ lowerCase name }}', (done) => {
            request.get(`/v1/{{ lowerCase name }}s/${context.{{ lowerCase name }}._id}`).set('Accept', 'application/json').expect(200, (err, res) => {
                if (err) {
                    return done(err)
                }

                res.body.should.have.property('data')
                done()
            })
        })
    })

    describe(`PUT v1/{{ lowerCase name }}`, () => {
        it('should reject put due to authentication', (done) => {
            request.put(`/v1/{{ lowerCase name }}s/${context.{{ lowerCase name }}._id}`).set('Accept', 'application/json').expect(401, done)
        })

        it('should put {{ lowerCase name }}', (done) => {
            request.put(`/v1/{{ lowerCase name }}s/${context.{{ lowerCase name }}._id}`)
            .set({Accept:  'application/json', Authorization: `Bearer ${context.token}`})
            .send({{ curly true }}{{#each fields}}{{#if this.required}}
                    {{ camelCase this.name }}: 'test',{{/if}}{{/each}}
            {{ curly }})
            .expect(200, (err, res) => {
                if (err) {
                    return done(err)
                }

                res.body.should.have.property('data'){{#each fields}}{{#if this.required}}
                res.body.data.{{ camelCase this.name }}.should.equals('test2'){{/if}}{{/each}}
                done()
            })
        })
    })

    describe(`DELETE v1/{{ lowerCase name }}`, () => {
        it('should reject delete due to authentication', (done) => {
            request.delete(`/v1/{{ lowerCase name }}s/${context.{{ lowerCase name }}._id}`).set('Accept', 'application/json').expect(401, done)
        })

        it('should delete {{ lowerCase name }}', (done) => {
            request.delete(`/v1/{{ lowerCase name }}s/${context.{{ lowerCase name }}._id}`).set({Accept:  'application/json', Authorization: `Bearer ${context.token}`}).expect(200, (err, res) => {
                if (err) {
                    return done(err)
                }
                done()
            })
        })
    })

    /** GENERATED CONTENT. DO NOT TOUCH **/
})
